ABSTRACT PROPERTIES
- are defined in abstract base class

EX:1
from abc import ABC, abstractmethod
    @property
    @abstractmethod
    def name(self):
        pass
    
class Circle(Shape):
    def __init__(self, radius, name):
        self.radius = radius
        self.__name = name
        
    @property
    def name(self):
        return self.__name
        
EX:2
from abc import ABC, abstractmethod
class Character(ABC):
    @property
    @abstractmethod
    def alias(self):
        pass
    
class Batman(Character):
    def  __init__(self, real_name, alias):
        self.real_name = real_name
        self.__alias = alias
    
    @property
    def alias(self):
        return f"{self.__alias}"
        
batman= Batman("Bruce Wayne", "Batman")
print(batman.alias)
OUTPUT:
  Batman

IMPORTS
  -is used make the code from another module available on the current module.

EX:1
-MODULE
from abc import ABC, abstractmethod
class Character(ABC):
    @property
    @abstractmethod
    def alias(self):
        pass
    
class Batman(Character):
    def  __init__(self, real_name, alias):
        self.real_name = real_name
        self.__alias = alias
    
    @property
    def alias(self):
        return f"{self.__alias}"
-MAIN FILE
import blueprint as bp

pang_derbi = bp.Batman("Asul","Blue")
print(pang_derbi.alias)

OUTPUT:
  Blue
        
LA#26
-MODULE
from abc import ABC, abstractmethod
class NinjaTurtle(ABC):
    @property
    @abstractmethod
    def alias(self):
        pass
    
class Leonardo(NinjaTurtle):
    def  __init__(self, real_name, alias):
        self.real_name = real_name
        self.__alias = alias
    
    @property
    def alias(self):
        return f"{self.__alias}"

class Michelangelo(NinjaTurtle):
    def  __init__(self, real_name, alias):
        self.real_name = real_name
        self.__alias = alias
    
    @property
    def alias(self):
        return f"{self.__alias}"

class Donatello(NinjaTurtle):
    def  __init__(self, real_name, alias):
        self.real_name = real_name
        self.__alias = alias
    
    @property
    def alias(self):
        return f"{self.__alias}"

class Raphael(NinjaTurtle):
    def  __init__(self, real_name, alias):
        self.real_name = real_name
        self.__alias = alias
    
    @property
    def alias(self):
        return f"{self.__alias}"

-main.py

import turtle

leo = turtle.Leonardo("Leonardo","Katana")
gelo = turtle.Michelangelo("Michelangelo","Nunchakaku")
tel = turtle.Donatello("Donatello","Boxstaff")
rap = turtle.Raphael("Raphael","Sai")

print(leo.alias)
print(gelo.alias)
print(tel.alias)
print(rap.alias)

OUTPUT:
Katana
Nunchakaku
Boxstaff
Sai
