#ENCAPSULATION - is one of the fundemental concepts 
               - data and the methods that work on data within one unit

class Lumpia_wrapper:
    def __init__(self, pork, onion, carrot):
        self.__pork = pork
        self.onion = onion
        self.carrot = carrot
        
    def __str__(self):
        return f"My lumpia has {self.__pork}, {self.onion}, {self.carrot}"

lumpia_prito = lumpia_wrapper("pork",
                                    "onion",
                                    "carrot")
print(lumpia_prito.__pork)

# ACCESS MODIFIERS

class Ice_cream:
    def __init__(self, chocolate, whole_milk, heavy_cream):
        self.chocolate = chocolate
        self.whole_milk = whole_milk
        self.heavy_cream = heavy_cream
        
    def __str__(self):
        return f'''My ice cream has {self.chocolate},
        {self.whole_milk}, 
        {self.heavy_cream} ingredients.'''
    
choco = Ice_cream("Chocolate", "Whole Milk", "Heavy Cream")
mat = Ice_cream("Matcha", "Whole Milk", "Heavy Cream")
van = Ice_cream("Vanilla", "Whole Milk", "Heavy Cream")
    
print(choco)
print(mat)
print(van)

#class Lumpia_wrapper:
    def __init__(self, pork, onion, carrot):
        self.pork = pork #public
        self._onion = onion #protected
        self.__carrot = carrot #private
        
    def __str__(self):
        return f"My lumpia has {self.pork}, {self.onion}, {self._carrot}"
        
    def rot(self):
        return self.__rot

lumpia_prito = lumpia_wrapper("pork","onion","carrot")

print(lumpia_prito.rot())

#ENCAPSULATIONS GETTER
class Ice_cream:
    def __init__(self, chocolate, whole_milk, heavy_cream):
        self.chocolate = chocolate
        self.__whole_milk = whole_milk
        self.heavy_cream = heavy_cream
        
    def __str__(self):
        return f'''My ice cream has {self.chocolate},{self.__whole_milk}, {self.heavy_cream} ingredients.'''
    
    def has_milk(self):
        return self.__whole_milk
    
choco = Ice_cream("Chocolate", "Whole Milk", "Heavy Cream")
mat = Ice_cream("Matcha", "Whole Milk", "Heavy Cream")
van = Ice_cream("Vanilla", "Whole Milk", "Heavy Cream")
    
print(choco)
print(mat)
print(van)
print(choco.has_milk())

#ENCAPSULATOR SETTER - modify
class Ice_cream:
    def __init__(self, chocolate, whole_milk, heavy_cream):
        self._chocolate = chocolate
        self.__whole_milk = whole_milk
        self.heavy_cream = heavy_cream
        
    def __str__(self):
        return f'''My ice cream has {self._chocolate},{self.__whole_milk}, {self.heavy_cream} ingredients.'''
    
    def has_milk(self):
        return self.__whole_milk
        
    def new_milk(self, new):
        self.__whole_milk = new
    
choco = Ice_cream("Chocolate", "Whole Milk", "Heavy Cream")
mat = Ice_cream("Matcha", "Whole Milk", "Heavy Cream")
van = Ice_cream("Vanilla", "Whole Milk", "Heavy Cream")

choco.new_milk("5 milk")
    
print(choco)
print(mat)
print(van)
print(choco.has_milk())

