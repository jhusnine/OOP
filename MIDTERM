from abc import ABC, abstractmethod

class Wallet(ABC):
    @abstractmethod
    def transaction(self, amount, transaction_type):
        pass

    @property
    @abstractmethod
    def balance(self):
        pass

class BitcoinWallet(Wallet):
    def __init__(self, name, btc_balance):
        self.name = name
        self.__btc_balance = float(btc_balance)

    def transaction(self, amount, transaction_type):
        amount = float(amount)
        if transaction_type == "buy":


            self.__btc_balance += amount
            print(f"Transaction successful: Bought {amount} BTC.")
        elif transaction_type == "sell":

            if amount > self.__btc_balance:
                print("Transaction failed: Insufficient balance.")

                return
            self.__btc_balance -= amount
            print(f"Transaction Successful: Sold {amount} BTC.")
        else:
            print(f"Invalid Transaction type. Use 'buy' or 'sell'.")
    @property
    def balance(self):
        return self.__btc_balance
    
    def __str__(self):
        return f"BitcoinWallet(owner = {self.name}, balance {self.__btc_balance}. BTH)"

class EthereumWallet(Wallet):
    def __init__(self, name, eth_balance):
        self.name = name
        self.__eth_balance = float(eth_balance)

    def transaction(self, amount, transaction_type):
        amount = float(amount)
        if transaction_type == "buy":

            self.__eth_balance += amount
            print(f"Transaction successful: Bought {amount} ETH.")
        elif transaction_type == "sell":

            if amount > self.__eth_balance:
                print("Transaction failed: Insufficient balance.")
                return
            
            self.__eth_balance -= amount
            print(f"Transaction Successful: Sold {amount} ETH.")
        else:
            print(f"Invalid Transaction type. Use 'buy' or 'sell'.")
    @property

    def balance(self):
        return self.__eth_balance
    
    def __str__(self):
        return f"EthereumWallet(owner = {self.name}, balance {self.__eth_balance}. ETH)"

Alice = BitcoinWallet("Alice", 0.5)
Bob = EthereumWallet("Bob", 2.0)

print("Bitcoin Wallet for Alice")
print(f"Initial Balance: {Alice.balance} BTC")
Alice.transaction(0.2, "buy")
print(f"New Balance: {Alice.balance} BTC\n")
print("Ethereum Wallet for Bob")

print(f"Initial Balance: {Bob.balance} ETH")
Bob.transaction(3.0, "sell")
Bob.transaction(1.0, "sell")
print(f"New Balance: {Bob.balance} ETH")
