from abc import ABC, abstractmethod

class Wallet(ABC):
    def __init__(self, balance=0.0):
        self.__balance = balance

    @abstractmethod
    def Transaction(self, transactionType, amount):
        pass

    @property
    def balance(self):
        return self.__balance

class BitcoinWallet(Wallet):
    def __init__(self, balance=0.0):
        super().__init__(balance)

    def Transaction(self, transactionType, amount):
        if transactionType == "buy":
            self.__Wallet_Balance += amount
        elif transactionType == "sell" and self.__Wallet_Balance >= amount:
            self.__Wallet_Balance -= amount
        else:
            print("Invalid transaction or insufficient balance!")

class EthereumWallet(Wallet):
    def __init__(self, balance=0.0):
        super().__init__(balance)

    def Transaction(self, transaction_type, amount):
        if transaction_type == "buy":
            self.__Wallet_Balance += amount 
        elif transaction_type == "sell" and self.__Wallet_Balance >= amount:
            self.__Wallet_Balance -= amount
        else:
            print("Invalid transaction or insufficient balance!")

Alice = BitcoinWallet(0.5)
Bob = EthereumWallet(2.0)

print("Bitcoin Wallet for Alice")
print(f"Initial Balance: {Alice.balance} BTC")
Alice.Transaction("buy", 0.2)
print(f"Performing Transaction: Buy 0.2 BTC")
print(f"New Balance: {Alice.balance} BTC\n")

print("Ethereum Wallet for Bob")
print(f"Initial Balance: {Bob.balance} ETH")
Bob.Transaction("sell", 1.0)
print(f"Performing Transaction: Sell 1.0 ETH")
print(f"New Balance: {Bob.balance} ETH")
