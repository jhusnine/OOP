PRIVATE METHOD:
  -is a method that is intended to be hidden from outside access.
  -you can use double underscore(__).

EX:1
class bday:
  def __init__(self, name):
    self.name = name
  
  def foods(self): #public method
    print("Cake, salad, chiken...")
    self.__lumpia()
  def __lumpia(self): #private method
    print(f"Lumpia {self.name}")

bisita = bday("Shanghai")
bisita._bday__lumpia() #to access private method:(_classname__privaemethod)

EX:2
class bday:
    def __init__(self, name):
        self.name = name

    def __lumpia(self): #private method
        print(f"Lumpiang {self.name}")
        
    def handaan(self): #public method
        print("Cake, salad, spag..")
        self.__lumpia()

bisita = bday("Shanghai")
bisita.handaan()#to access private method:(_classname__privaemethod)

DECORATOR:
  -class Bday:
    def __init__(self, name):
        self.name = name
    
    def handaan(self, func_name):
        def pinyata(*args, **kwargs):
            print("Cake, Letson, spag..")
            func_name(*args, **kwargs)
            print("Successful!!")
        return pinyata
            
shanghai = Bday("Shanghai")

@shanghai.handaan
def eatALLYouCan(mga_pagkain):
    print(mga_pagkain)
eatALLYouCan("Pritong manok")
OUTPUT:
Cake, Letson, spag..
Pritong manok
Successful!!


*args - list/ array
**kwargs - key value pair - dictionary


-
ABSTRACTION -hide complex implementation details

METHOD

from abc import ABC, abs
class BaseClass(ABC):
  @abstactmethod
  def method_1(self):

obj1 = BaseClass()
obj1.method()


from abc import ABC, abstractmethod
class Character(ABC):
    def __init__(self, name):
        super().__init__()
        self.name = name
    @abstractmethod
    def special_move(self):
        pass
    
class MainCharacter(Character):
    def special_move(self, move):
        print(f"{self.name} use the special move {move}")
    
dbz = MainCharacter("Vegeta")
dbz.special_move("Final Flash")



